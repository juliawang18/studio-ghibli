{"version":3,"sources":["Assests/title.jpg","Assests/castle.jpg","Assests/fireflies.jpg","Assests/totoro.jpg","Assests/kikis.jpg","Assests/yesterday.jpg","Assests/rosso.jpg","Assests/pompoko.jpg","Assests/whisper.jpg","Assests/monoke.jpg","Assests/yamadas.jpg","Assests/spiritedaway.jpg","Assests/catreturns.jpg","Assests/howls.jpg","Assests/earthsea.jpg","Assests/ponyo.jpg","Assests/arrietty.jpg","Assests/poppy.jpg","Assests/thewindrises.jpg","Assests/kaguya.jpg","Assests/whenmarnie.jpg","Film.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Film","react_default","a","createElement","className","src","this","props","pic","alt","height","width","title","date","description","Component","imgArray","castle","fireflies","totoro","kikis","yesterday","rosso","pompoko","whisper","monoke","yamadas","spiritedaway","catreturns","howls","earthsea","ponyo","arrietty","poppy","thewindrises","kaguya","whenmarnie","titles","dates","descriptions","films","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","didLoad","fetch","response","json","i","release_date","setState","loadInfo","addFilm","map","film","index","src_Film_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15112008.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.eb32498d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/castle.4e7a6437.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fireflies.67535497.jpg\";","module.exports = __webpack_public_path__ + \"static/media/totoro.7f84fb07.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kikis.89a84318.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yesterday.5a41ebdf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rosso.da31f8fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pompoko.cb430dc4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/whisper.c00ec55a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/monoke.09cea881.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yamadas.6076f2ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spiritedaway.6bff4e7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/catreturns.a6793336.jpg\";","module.exports = __webpack_public_path__ + \"static/media/howls.394a454d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/earthsea.22865f20.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ponyo.69f51194.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrietty.a0ef4ef0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poppy.01683124.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thewindrises.12b91b94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kaguya.339f6dd3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/whenmarnie.2b943213.jpg\";","import React, { Component } from 'react';\nimport './Film.css';\n\nclass Film extends Component {\n    render() {\n        return (\n            <div className =\"film-component\">\n              <style>\n               @import url('https://fonts.googleapis.com/css?family=Overpass');\n              </style>\n              <img className = \"pic\" src={this.props.pic} alt = \"\" height=\"380\" width=\"650\"/>\n              <div className = \"text\">\n                <div className = \"title\">{this.props.title}</div>\n                <div className = \"release-date\">{this.props.date}</div>\n                <div className = \"description\">{this.props.description}</div>\n              </div>\n            </div>\n        )\n      }\n}\n\nexport default Film;","import React, { Component } from 'react';\nimport title from './Assests/title.jpg';\nimport castle from './Assests/castle.jpg';\nimport fireflies from './Assests/fireflies.jpg';\nimport totoro from './Assests/totoro.jpg';\nimport kikis from './Assests/kikis.jpg';\nimport yesterday from './Assests/yesterday.jpg';\nimport rosso from './Assests/rosso.jpg';\nimport pompoko from './Assests/pompoko.jpg';\nimport whisper from './Assests/whisper.jpg';\nimport monoke from './Assests/monoke.jpg';\nimport yamadas from './Assests/yamadas.jpg';\nimport spiritedaway from './Assests/spiritedaway.jpg';\nimport catreturns from './Assests/catreturns.jpg';\nimport howls from './Assests/howls.jpg';\nimport earthsea from './Assests/earthsea.jpg';\nimport ponyo from './Assests/ponyo.jpg';\nimport arrietty from './Assests/arrietty.jpg';\nimport poppy from './Assests/poppy.jpg';\nimport thewindrises from './Assests/thewindrises.jpg';\nimport kaguya from './Assests/kaguya.jpg';\nimport whenmarnie from './Assests/whenmarnie.jpg';\nimport './App.css';\nimport Film from './Film';\n\nconst imgArray = [castle, fireflies, totoro, kikis, yesterday, rosso, pompoko, whisper, monoke, \n  yamadas, spiritedaway, catreturns, howls, earthsea, ponyo, arrietty, poppy, thewindrises, kaguya, whenmarnie];\n\nlet titles = [];\nlet dates = [];\nlet descriptions = [];\nlet films = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      didLoad: false\n    };\n  }\n\n  async loadInfo() {\n    const response = await fetch(`https://ghibliapi.herokuapp.com/films`);\n    const json = await response.json();\n    let i;\n    for (i = 0; i < 20; i++) {\n      titles[i]= (json[i].title);\n      dates[i]=(json[i].release_date);\n      descriptions[i]=(json[i].description);\n    }\n    this.setState({\n      didLoad: true\n    })\n  }\n\n  componentDidMount() {\n    this.loadInfo();\n  }\n\n  addFilm() {\n    let i;\n    for (i = 0; i < 20; i++){\n       films[i] = [titles[i], dates[i], descriptions[i]];\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ghibli-container\">\n        <style>\n        @import url('https://fonts.googleapis.com/css?family=Overpass');\n        </style>\n        <div className = \"film title\">\n          <img className=\"g-title\" alt=\"\" src={title}/>\n        </div>\n        <div className = \"film list\">\n          {this.addFilm()}\n          <ul>\n            {films.map((film, index) => (\n              <Film\n                pic = {imgArray[index]}\n                title = {films[index][0]}\n                date = {films[index][1]}\n                description = {films[index][2]}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}